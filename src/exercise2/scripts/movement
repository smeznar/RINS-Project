#!/usr/bin/env python
# -*- Mode: Python; indent-tabs-mode: nil; c-basic-offset: 2; tab-width: 2 -*- *

import roslib; roslib.load_manifest('exercise2')
import rospy
import random
from geometry_msgs.msg import Twist

def rectangle_movement(step):
  twist = Twist()
  twist.linear.x = 0.4
  step = step % 20

  if step % 5 == 0:
    twist.linear.x = 0
    twist.angular.z = 1.57 #(90 / 360) * 2 * 3.14
  return twist

def circular_movement():
	twist = Twist()
	twist.linear.x = 2
	twist.angular.z = 3.14/2
	return twist


def triangular_movement(step):
  twist = Twist()
  twist.linear.x = 0.5
  step = step % 20

  if step % 5 == 0:
    twist.linear.x = 0
    twist.angular.z = 2.094 #(90 / 360) * 2 * 3.14
  return twist


def random_movement():
  twist = Twist()
  twist.linear.x = 1
  twist.angular.z = 2*random.random()*3.14 - 3.14
  return twist


def movement():
  pub = rospy.Publisher('cmd_vel', Twist, queue_size = 1000)
  # For the turtle simulation map the topic to /turtle1/cmd_vel
  # For the turtlebot simulation and Turtlebot map the topic to /cmd_vel_mux/input/navi
  rospy.init_node('movement')

  r = rospy.Rate(1)

  step = 0.0
  while not rospy.is_shutdown():
    shape = rospy.get_param("move_type")
    rtime = rospy.get_param("move_time")
    time = rtime
    step = 0
    while time > 0:
      if(shape == "rectangle"):
        twist = rectangle_movement(step)
      elif(shape == "triangle"):
        twist = triangular_movement(step)
      elif(shape == "circle"):
        twist = circular_movement()
      else:
  	    twist = random_movement()
      pub.publish(twist)
      time = time-1
      step = step + 1.0
      r.sleep()
    if not rtime == 0:
      rospy.set_param("move_time",0)
    r.sleep()


if __name__ == '__main__':
    movement()
